?mean
getwd()
setwd("/home/ysun/下载/gene.info等2个文件")
library(ggplot2)
library(reshape)
count2 <- read.table(file='gene_count2.tab', header = TRUE, row.names=1)
count2 <- cbind(row.names(count2), count2)
count2 <- melt(count2, id.vars = 'row.names(count2)', variable.name = 'series')
count2 <- read.table(file='gene_count2.tab', header = TRUE, row.names=1)
NormalizeConstantCol <- function(col) {
scaling.factor = scaling.constant/mean(col, trim = 0.02)
return(scaling.factor * col)
}
NormalizeConstant <- function(eData, scaling.constant = 500) {
# Normalize the expression matrix.
#
# Args:
#   eData: Matrix that contains expression intensity.
#   sc: A constant as reference of normalization. Default: 500.
#
# Returns:
#   The normalized expression matrix.
return(apply(eData, 2, NormalizeConstantCol))
}
NormalizeConstant(count2)
NormalizeConstant <- function(eData, scaling.constant = 500) {
# Normalize the expression matrix.
#
# Args:
#   eData: Matrix that contains expression intensity.
#   sc: A constant as reference of normalization. Default: 500.
#
# Returns:
#   The normalized expression matrix.
return(apply(eData, 2, NormalizeConstantCol(scaling.constant)))
}
NormalizeConstant(count2)
return(apply(eData, 2, NormalizeConstantCol(scaling.constant = scaling.constant
)))
NormalizeConstantCol <- function(col, scaling.constant = 500) {
scaling.factor = scaling.constant/mean(col, trim = 0.02)
return(scaling.factor * col)
}
NormalizeConstant <- function(eData, scaling.constant = 500) {
# Normalize the expression matrix.
#
# Args:
#   eData: Matrix that contains expression intensity.
#   sc: A constant as reference of normalization. Default: 500.
#
# Returns:
#   The normalized expression matrix.
return(apply(eData, 2, NormalizeConstantCol(scaling.constant = scaling.constant
)))
}
NormalizeConstant(count2)
?apply
return(apply(eData, 2, NormalizeConstantCol(x, scaling.constant = scaling.constant
)))
apply(eData, 2, NormalizeConstantCol(x, scaling.constant = scaling.constant
))
return(apply(eData, 2, NormalizeConstantCol(x, scaling.constant = scaling.constant
)))
return(apply(eData, 2, NormalizeConstantCol(x, scaling.constant = scaling.constant
)))
NormalizeConstantCol <- function(col, scaling.constant = 500) {
scaling.factor = scaling.constant/mean(col, trim = 0.02)
return(scaling.factor * col)
}
apply(eData, 2, NormalizeConstantCol(x, scaling.constant = scaling.constant)
)
NormalizeConstantCol <- function(col, scaling.constant = 500) {
scaling.factor = scaling.constant/mean(col, trim = 0.02)
return(scaling.factor * col)
}
NormalizeConstant <- function(eData, scaling.constant = 500) {
# Normalize the expression matrix.
#
# Args:
#   eData: Matrix that contains expression intensity.
#   sc: A constant as reference of normalization. Default: 500.
#
# Returns:
#   The normalized expression matrix.
return(apply(eData, 2, NormalizeConstantCol(x, scaling.constant = scaling.constant
)))
}
NormalizeConstant(count2)
NormalizeConstant(count2)
return(apply(eData, 2, NormalizeConstantCol, scaling.constant = scaling.constant
)))
return(apply(eData, 2, NormalizeConstantCol, scaling.constant = scaling.constant
))
NormalizeConstantCol <- function(col, scaling.constant = 500) {
scaling.factor = scaling.constant/mean(col, trim = 0.02)
return(scaling.factor * col)
}
NormalizeConstant <- function(eData, scaling.constant = 500) {
# Normalize the expression matrix.
#
# Args:
#   eData: Matrix that contains expression intensity.
#   sc: A constant as reference of normalization. Default: 500.
#
# Returns:
#   The normalized expression matrix.
return(apply(eData, 2, NormalizeConstantCol, scaling.constant = scaling.constant
))
}
NormalizeConstant(count2)
count2 <- NormalizeConstant(count2)
count2 <- cbind(row.names(count2), count2)
count2 <- melt(count2, id.vars = 'row.names(count2)', variable.name = 'series')
ggplot(data = count2, aes(value, colour = variable)) + geom_density() + scale_x_continuous(trans = 'log2')
library(ggplot2)
head(count2)
count2 <- read.table(file='gene_count2.tab', header = TRUE, row.names=1)
head(count2)
count2 <- NormalizeConstant(count2)
head(count2)
count2 <- cbind(row.names(count2), count2)
head(count2)
count2 <- melt(count2, id.vars = 'row.names(count2)', variable.name = 'series')
head(count2)
?melt
count2 <- melt(count2, id.vars = 1, variable.name = 'series')
count2 <- read.table(file='gene_count2.tab', header = TRUE, row.names=1)
count2 <- NormalizeConstant(count2)
count2 <- cbind(row.names(count2), count2)
count2 <- melt(count2, id.vars = 'row.names(count2)', variable.name = 'series')
count2 <- read.table(file='gene_count2.tab', header = TRUE, row.names=1)
count2 <- NormalizeConstant(count2)
count2 <- cbind(row.names(count2), count2)
count2 <- melt(count2, id.vars = 1, variable.name = 'series')
head(count2)
count2 <- read.table(file='gene_count2.tab', header = TRUE, row.names=1)
count2 <- NormalizeConstant(count2)
count2 <- cbind(row.names(count2), count2)
head(count2)
count2 <- melt(count2, id = 1, variable.name = 'series')
head(count2)
NormalizeConstantCol <- function(col, scaling.constant = 500) {
scaling.factor = scaling.constant/mean(col, trim = 0.02)
return(scaling.factor * col)
}
NormalizeConstant <- function(eData, scaling.constant = 500) {
# Normalize the expression matrix.
#
# Args:
#   eData: Matrix that contains expression intensity.
#   sc: A constant as reference of normalization. Default: 500.
#
# Returns:
#   The normalized expression matrix.
return(apply(eData, 2, NormalizeConstantCol, scaling.constant = scaling.constant
))
}
count2 <- read.table(file='gene_count2.tab', header = TRUE, row.names=1)
count2 <- NormalizeConstant(count2)
str(count2)
class(count2)
count2 <- cbind(row.names(count2), count2)
str(count2)
count2[1,]
count2 <- read.table(file='gene_count2.tab', header = TRUE, row.names=1)
count2 <- cbind(row.names(count2), count2)
str(count2)
count2 <- read.table(file='gene_count2.tab', header = TRUE, row.names=1)
count2 <- NormalizeConstant(count2)
count2 <- cbind(row.names(count2), count2, deparse.level = 0)
head(count2)
count2 <- read.table(file='gene_count2.tab', header = TRUE, row.names=1)
count2 <- NormalizeConstant(count2)
head(count2)
count2 <- data.frame(row.names(count2), count2)
head(count2)
count2 <- melt(count2, id.vars = 1, variable.name = 'series')
head(count2)
ggplot(data = count2, aes(value, colour = variable)) + geom_density() + scale_x_continuous(trans = 'log2')
ggplot(data = count2, aes(variable, value)) + geom_boxplot(notch = TRUE) + scale_y_continuous(trans = 'log2')
count2 <- read.table(file='gene_count2.tab', header = TRUE, row.names=1)
count2 <- data.frame(row.names(count2), count2)
count2 <- melt(count2, id.vars = 1, variable.name = 'series')
ggplot(data = count2, aes(value, colour = variable)) + geom_density() + scale_x_continuous(trans = 'log2')
ggplot(data = count2, aes(variable, value)) + geom_boxplot(notch = TRUE) + scale_y_continuous(trans = 'log2')
rm(list = s())
rm(list = ls())
source(normalization.R)
count2 <- read.table(file='gene_count2.tab', header = TRUE, row.names=1)
count2 <- NormalizeConstant(count2)
count2 <- data.frame(row.names(count2), count2)
count2 <- melt(count2, id.vars = 1, variable.name = 'series')
rm(list = ls())
source('normalization.R')
count2 <- read.table(file='gene_count2.tab', header = TRUE, row.names=1)
count2 <- NormalizeConstant(count2)
count2 <- data.frame(row.names(count2), count2)
count2 <- melt(count2, id.vars = 1, variable.name = 'series')
source('normalization.R')
count2 <- read.table(file='gene_count2.tab', header = TRUE, row.names=1)
count2 <- NormalizeConstant(count2)
count2 <- data.frame(row.names(count2), count2)
count2 <- melt(count2, id.vars = 1, variable.name = 'series')
bg.correct
library(affy)
bg.correct
standardGeneric
library(affydata)
data(Dilution)
str(Dilution)
hhh <- exprs(Dilution)
head(hhh)
bg.correct.methods
bg.correct.methods()
meth <- bgcorrect.methods()
meth
bg.correct
bgc <- bg.correct(Dilution, method="rma")
fff <- exprs(bgc)
head(fff)
head(hhh)
library(CLL)
data(CLL)
library(CLLbatch)
data(CLLbatch)
data(Dilution)
bgc <- bg.correct(Dilution, method="mas")
fff <- exprs(bgc)
head(fff)
head(hhh)
plot(pm(Dilution)[,1],pm(bgc)[,1],log="xy",
main="PMs before and after background correction")
)
plot(pm(Dilution)[,1],pm(bgc)[,1],log="xy",main="PMs before and after background correction")
bpm <- pm(Dilution)
apm <- pm(bgc)
head(bpm)
head(apm)
plot(pm(Dilution)[,1],pm(bgc)[,1])
data(Dilution)
##bgc will be the bg corrected version of Dilution
bgc <- bg.correct(Dilution, method="rma")
head(pm(Dilution))
head(bgc)
head(pm(bgc))
head(pm(Dilution))
plot(pm(Dilution)[,1],pm(bgc)[,1])
plot(pm(Dilution)[,1],pm(bgc)[,1],pch = 19)
plot(pm(Dilution)[,1],pm(bgc)[,1],pch = 19,cex = 0.5)
max(pm(Dilution)[,1])
max(pm(bgc)[,1])
min(pm(Dilution)[,1])
min(pm(bgc)[,1])
head(pm(Dilution)[,1]/pm(bgc)[,1])
head(pm(Dilution)[,1]/pm(bgc)[,1],5)
rm(CLLbatch)
gc()
rm(list = ls())
if (require(affydata)) {
data(Dilution)
##bgc will be the bg corrected version of Dilution
bgc <- bg.correct(Dilution, method="rma")
##This plot shows the tranformation
plot(pm(Dilution)[,1],pm(bgc)[,1],pch = 19, cex = 0.3
main="PMs before and after background correction")
}
if (require(affydata)) {
data(Dilution)
##bgc will be the bg corrected version of Dilution
bgc <- bg.correct(Dilution, method="rma")
##This plot shows the tranformation
plot(pm(Dilution)[,1],pm(bgc)[,1],pch = 19, cex = 0.3,
main="PMs before and after background correction")
}
rrr <- pm(Dilution)[,1]/pm(bgc)[,1]
plot(rrr, pch = 19, cex = 0.3)
hist(rrr, pch = 19, cex = 0.3)
barplot(rrr, pch = 19, cex = 0.3)
barplot(rrr[,1], pch = 19, cex = 0.3)
head(pm(bgc))
head(pm(Dilution))
plot(pm(Dilution)[,1],pm(bgc)[,1],pch = 19, cex = 0.3,
main="PMs before and after background correction", xlim = c(0,500))
plot(pm(Dilution)[,1],pm(bgc)[,1],pch = 19, cex = 0.3,
main="PMs before and after background correction", xlim = c(0,500), ylim = c(0, 500))
rm(list = ls())
set('~/research_projects/project1/')
setwd('~/research_projects/project1/')
expr <- read.table('expr', header = TRUE)
head(expr)
expr <- read.table('expr')
head(expr)
expr1 <- read.table('expr')
sample.names <- c('37', '40', '58', '59', '63', '69', '49', '50', '64', '67', '68', '79', '70', '72', '73', '75', '90', '91')
len(sample.names)
length(sample.names)
library(data.table)
typeof()
?typeof
typeof(1)
typeof(1L)
typeof(NA)
typeof(NA_integer_)
?data.table
?intensity
data("Dilution")
head(intensity(Dilution))
str(Dilution)
dim(intensity(Dilution))
dim(pm(Dilution))
dim(mm(Dilution))
head(intensity(Dilution))
head(pm(Dilution))
head(mm(Dilution))
pm
showMethods("pm")
standardGeneric("pm")
head(expr1)
?substr
?tail
?%between%
median
?median
DT.expr1 <- data.table(expr1)
head(DT.expr1)
A <- data.table(ID = 1:5, x = c(NA, 1:4), y = c(4:2,NA,3))
A
mm <- model.matrix( ~ x + y, A)
mm
rownames(mm)
haskey(DT.expr1)
rm(list = ls())
expr1 <- read.table('expr')
sample.names <- c('37', '40', '58', '59', '63', '69', '49', '50', '64', '67', '68', '79', '70', '72', '73', '75', '90', '91')
DT.expr1 <- data.table(expr1)
head(DT.expr1)
?setnames
setnames(DT.expr1, sample.names)
setkey(DT.expr1, V1)
setnames(DT.expr1, sample.names)
head(data.table
)
head(DT.expr1
)
setnames(DT, c('miRNAs, sample.names'))
setnames(DT.expr1, c('miRNAs, sample.names'))
expr1 <- read.table('expr')
sample.names <- c('37', '40', '58', '59', '63', '69', '49', '50', '64', '67', '68', '79', '70', '72', '73', '75', '90', '91')
DT.expr1 <- data.table(expr1)
setkey(DT.expr1, V1)
expr1 <- read.table('expr')
sample.names <- c('37', '40', '58', '59', '63', '69', '49', '50', '64', '67', '68', '79', '70', '72', '73', '75', '90', '91')
DT.expr1 <- data.table(expr1)
setnames(DT.expr1, c('miRNAs, sample.names'))
?fread
DT.expr1 <- fread('expr')
head(DT.expr1)
?setnames
sample.names <- c('miRNAs', '37', '40', '58', '59', '63', '69', '49', '50', '64', '67', '68', '79', '70', '72', '73', '75', '90', '91')
setnames(DT.expr1, sample.names)
head(DT.expr1)
library(cowplot)
library(reshape2)
?melt
library(data.table)
?melt
